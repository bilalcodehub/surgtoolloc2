# AUTOGENERATED! DO NOT EDIT! File to edit: 02_segmentation-image_cleansing.ipynb.

# %% auto 0
__all__ = ['codes', 'get_image_mask', 'custom_accuracy', 'main']

# %% 02_segmentation-image_cleansing.ipynb 50
import os
os.environ['CUDA_VISIBLE_DEVICES'] = "1"

# %% 02_segmentation-image_cleansing.ipynb 51
from fastai.vision.all import *
from fastcore.parallel import *
from skimage.measure import label, regionprops, find_contours
from datetime import datetime
import cv2

# %% 02_segmentation-image_cleansing.ipynb 52
codes = ["Background", "Foreground"]

# %% 02_segmentation-image_cleansing.ipynb 53
def get_image_mask(fn):
    f=Path(str(fn).replace('images', 'masks').replace('jpg','png'))
    return PILMask.create(f) 

# %% 02_segmentation-image_cleansing.ipynb 54
def custom_accuracy(inp, targ):
    targ = targ.squeeze(1)
    return (inp.argmax(dim=1)==targ).float().mean()

# %% 02_segmentation-image_cleansing.ipynb 58
def main():
    # loading the best model
    learn=load_learner('/home/bilal/mlworks/surgtoolloc2/models/seg/seg_v1.pkl', cpu=False)

    # define src and dst folders
    src = Path().absolute()/'data/train_images_orig'
    dst = Path().absolute()/'data/train_images_crop'
    dst.mkdir(exist_ok=True)

    fssrc=set([parent_label(f)+'/'+f.name for f in get_image_files(src)])
    fsdst=set([parent_label(f)+'/'+f.name for f in get_image_files(dst)])

    fsdelta =  L(fssrc - fsdst)
    
    fs = L([src/f for f in fsdelta])

    # creating bunches for processing images
    bunches = [i for i in range(len(fs)) if i%50000==0]

    # for each bunch of images, predict masks and then use it to crop images and save them in the folder
    for i in range(len(bunches)):
        # setting start and end of a batch
        start=bunches[i]
        if not (i==len(bunches)-1):
            if bunches[i]==bunches[i+1]:
                end = len(bunches)
            else:
                end=bunches[i+1]
        else:
            end=len(fs)

        print("-Start Time =", datetime.now().strftime("%H:%M:%S"))

        print(f'-Predicting masks for images: {start} -> {end}.')
        preds,_ = learn.get_preds(dl=learn.dls.test_dl(fs[start:end]))

        print(f'-Cropping and saving images: {start} -> {end}.')

        # for p, f in zip(preds,fs[start:end]):
        for p, f in zip(preds,learn.dl.items):
            dst_clip = dst/parent_label(f)
            dst_clip.mkdir(exist_ok=True)

            fn = f.name

            im=PILImage.create(f)
            (h,w)=im.shape
            # (h,w)=(640,512)
            mask=PILMask.create((np.array(p.argmax(0))*255).astype(np.uint8))
            mask=Resize((h,w), ResizeMethod.Squish) (mask)

            lbl = label(np.array(mask))
            props = regionprops(lbl)
            x1,y1,x2,y2=props[0].bbox[0],props[0].bbox[2],props[0].bbox[1],props[0].bbox[3]

            im_c = PILImage.create(np.array(im)[x1:y1,x2:y2])
            im_c.save(dst_clip/fn)

        print("-End Time =", datetime.now().strftime("%H:%M:%S"))



# %% 02_segmentation-image_cleansing.ipynb 59
if __name__=='__main__':
    main()
